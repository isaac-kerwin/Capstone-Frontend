import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:csv/csv.dart';
import 'dart:io';
import 'package:share_plus/share_plus.dart';
import 'package:intl/intl.dart';

class BasicReportGenerator extends StatelessWidget {
  const BasicReportGenerator({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Event Details',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        fontFamily: 'Roboto',
      ),
      home: const EventDetailsPage(),
      debugShowCheckedModeBanner: false,
    );
  }
}

// Model class for participant data
class Participant {
  final String id;
  final String name;
  final String email;
  final String phone;
  final String ticketType;
  final DateTime registrationDate;
  final bool checkedIn;

  Participant({
    required this.id,
    required this.name,
    required this.email,
    required this.phone,
    required this.ticketType,
    required this.registrationDate,
    required this.checkedIn,
  });
}

// Sample participant data
List<Participant> getParticipantData() {
  return [
    Participant(
      id: 'P001',
      name: 'Marco Rossi',
      email: 'marco.rossi@example.com',
      phone: '+61 412 345 678',
      ticketType: 'VIP',
      registrationDate: DateTime(2024, 9, 15),
      checkedIn: true,
    ),
    Participant(
      id: 'P002',
      name: 'Giulia Bianchi',
      email: 'giulia.b@example.com',
      phone: '+61 423 456 789',
      ticketType: 'Standard',
      registrationDate: DateTime(2024, 9, 16),
      checkedIn: false,
    ),
    Participant(
      id: 'P003',
      name: 'Alessandro Verdi',
      email: 'a.verdi@example.com',
      phone: '+61 434 567 890',
      ticketType: 'Family',
      registrationDate: DateTime(2024, 9, 17),
      checkedIn: true,
    ),
    Participant(
      id: 'P004',
      name: 'Sofia Romano',
      email: 'sofia.r@example.com',
      phone: '+61 445 678 901',
      ticketType: 'VIP',
      registrationDate: DateTime(2024, 9, 18),
      checkedIn: true,
    ),
    Participant(
      id: 'P005',
      name: 'Luca Ferrari',
      email: 'luca.f@example.com',
      phone: '+61 456 789 012',
      ticketType: 'Standard',
      registrationDate: DateTime(2024, 9, 20),
      checkedIn: false,
    ),
  ];
}

class EventDetailsPage extends StatelessWidget {
  const EventDetailsPage({Key? key}) : super(key: key);

  Future<void> _generateAndShareReports(BuildContext context) async {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return const AlertDialog(
          content: Row(
            children: [
              CircularProgressIndicator(),
              SizedBox(width: 20),
              Text("Generating reports..."),
            ],
          ),
        );
      },
    );

    try {
      final participants = getParticipantData();
      final pdfFile = await _generatePdfReport(participants);
      final csvFile = await _generateCsvReport(participants);
      
      // Dismiss loading dialog
      Navigator.of(context).pop();
      
      // Show options dialog to share files
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: const Text("Reports Generated"),
            content: const Text("Choose which file to share:"),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  Share.shareXFiles([XFile(pdfFile.path)], text: 'Event Participant Report');
                },
                child: const Text("Share PDF"),
              ),
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  Share.shareXFiles([XFile(csvFile.path)], text: 'Event Participant Data');
                },
                child: const Text("Share CSV"),
              ),
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text("Cancel"),
              ),
            ],
          );
        },
      );
    } catch (e) {
      // Dismiss loading dialog
      Navigator.of(context).pop();
      
      // Show error dialog
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: const Text("Error"),
            content: Text("Failed to generate reports: ${e.toString()}"),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text("OK"),
              ),
            ],
          );
        },
      );
    }
  }

  Future<File> _generatePdfReport(List<Participant> participants) async {
    final pdf = pw.Document();
    
    pdf.addPage(
      pw.MultiPage(
        header: (context) => pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text('Melbourne Italian Festa 2024', style: pw.TextStyle(fontSize: 20, fontWeight: pw.FontWeight.bold)),
            pw.SizedBox(height: 5),
            pw.Text('Participant Report', style: pw.TextStyle(fontSize: 16)),
            pw.SizedBox(height: 5),
            pw.Text('Generated: ${DateFormat('dd/MM/yyyy HH:mm').format(DateTime.now())}'),
            pw.Divider(),
          ],
        ),
        footer: (context) => pw.Row(
          mainAxisAlignment: pw.MainAxisAlignment.end,
          children: [
            pw.Text('Page ${context.pageNumber} of ${context.pagesCount}'),
          ],
        ),
        build: (context) => [
          pw.Table.fromTextArray(
            headers: ['ID', 'Name', 'Email', 'Phone', 'Ticket Type', 'Registration Date', 'Checked In'],
            data: participants.map((p) => [
              p.id,
              p.name,
              p.email,
              p.phone,
              p.ticketType,
              DateFormat('dd/MM/yyyy').format(p.registrationDate),
              p.checkedIn ? 'Yes' : 'No',
            ]).toList(),
            headerStyle: pw.TextStyle(fontWeight: pw.FontWeight.bold),
            headerDecoration: const pw.BoxDecoration(color: PdfColors.grey300),
            cellHeight: 30,
            cellAlignments: {
              0: pw.Alignment.centerLeft,
              1: pw.Alignment.centerLeft,
              2: pw.Alignment.centerLeft,
              3: pw.Alignment.centerLeft,
              4: pw.Alignment.centerLeft,
              5: pw.Alignment.centerLeft,
              6: pw.Alignment.centerLeft,
            },
          ),
          pw.SizedBox(height: 20),
          pw.Row(
            mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
            children: [
              pw.Text('Total Participants: ${participants.length}'),
              pw.Text('Checked In: ${participants.where((p) => p.checkedIn).length}'),
            ],
          ),
        ],
      ),
    );

    final output = await getTemporaryDirectory();
    final file = File('${output.path}/melbourne_italian_festa_participants.pdf');
    await file.writeAsBytes(await pdf.save());
    return file;
  }

  Future<File> _generateCsvReport(List<Participant> participants) async {
    List<List<dynamic>> rows = [];
    
    // Add header row
    rows.add(['ID', 'Name', 'Email', 'Phone', 'Ticket Type', 'Registration Date', 'Checked In']);
    
    // Add data rows
    for (var p in participants) {
      rows.add([
        p.id,
        p.name,
        p.email,
        p.phone,
        p.ticketType,
        DateFormat('dd/MM/yyyy').format(p.registrationDate),
        p.checkedIn ? 'Yes' : 'No',
      ]);
    }
    
    String csv = const ListToCsvConverter().convert(rows);
    
    final output = await getTemporaryDirectory();
    final file = File('${output.path}/melbourne_italian_festa_participants.csv');
    await file.writeAsString(csv);
    return file;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () {
            // Handle back button press
          },
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 24.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const SizedBox(height: 8),
            const Text(
              'Melbourne Italian Festa 2024',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Colors.black,
              ),
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              decoration: BoxDecoration(
                color: Colors.grey[200],
                borderRadius: BorderRadius.circular(16),
              ),
              child: const Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    '5/80 Filled Capacity',
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.black87,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 24),
            EventInfoItem(
              icon: Icons.calendar_today,
              iconColor: Colors.blue,
              title: 'Saturday 5th October 2024',
              subtitle: '3pm to 11:30pm',
            ),
            const SizedBox(height: 16),
            EventInfoItem(
              icon: Icons.location_on,
              iconColor: Colors.blue,
              title: 'Royal Exhibition Building',
              subtitle: '9 Nicholson St, Carlton VIC 3053',
            ),
            const SizedBox(height: 32),
            ActionButton(
              text: 'GENERATE EVENT REPORT',
              icon: Icons.arrow_forward,
              onPressed: () => _generateAndShareReports(context),
            ),
            const SizedBox(height: 16),
            ActionButton(
              text: 'GENERATE EXTERNAL URL',
              icon: Icons.arrow_forward,
              onPressed: () {
                // Handle generate external URL
              },
            ),
            const SizedBox(height: 16),
            ActionButton(
              text: 'EDIT EVENT INFORMATION',
              icon: Icons.arrow_forward,
              onPressed: () {
                // Handle edit event information
              },
            ),
          ],
        ),
      ),
    );
  }
}

class EventInfoItem extends StatelessWidget {
  final IconData icon;
  final Color iconColor;
  final String title;
  final String subtitle;

  const EventInfoItem({
    Key? key,
    required this.icon,
    required this.iconColor,
    required this.title,
    required this.subtitle,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: iconColor.withOpacity(0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(
            icon,
            color: iconColor,
            size: 20,
          ),
        ),
        const SizedBox(width: 16),
        Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w500,
                color: Colors.black,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              subtitle,
              style: TextStyle(
                fontSize: 14,
                color: Colors.grey[600],
              ),
            ),
          ],
        ),
      ],
    );
  }
}

class ActionButton extends StatelessWidget {
  final String text;
  final IconData icon;
  final VoidCallback onPressed;

  const ActionButton({
    Key? key,
    required this.text,
    required this.icon,
    required this.onPressed,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF4358F6),
          foregroundColor: Colors.white,
          padding: const EdgeInsets.symmetric(vertical: 16),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              text,
              style: const TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.w500,
              ),
            ),
            const SizedBox(width: 8),
            Icon(icon, size: 16),
          ],
        ),
      ),
    );
  }
}